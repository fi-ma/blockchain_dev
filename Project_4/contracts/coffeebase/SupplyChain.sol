pragma solidity >=0.5.0 <0.7.0;

// Import the different Roles
import "../coffeecore/Ownable.sol";
import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/ProcessorRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeeaccesscontrol/RoasterRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";
import "../coffeeaccesscontrol/ConsumerRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is Ownable, FarmerRole, ProcessorRole, DistributorRole, RoasterRole, RetailerRole, ConsumerRole {
    // Define a variable called 'upc' for Universal Product Code (UPC)
    uint upc;

    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint sku;

    // Define a public mapping 'items' that maps the UPC to an Item.
    mapping (uint => Item) items;

    // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
    // that track its journey through the supply chain -- to be sent from DApp.
    mapping (uint => string[]) itemsHistory;

    // Define enum 'Process' with the following values:
    enum Process {
        NotProcessed,   // 0
        Washed,         // 1
        Natural,        // 2
        Honey           // 3
    }

    // Define enum 'Roast' with the following values:
    enum Roast {
        NotRoasted,     // 0
        Espresso,       // 1
        Filter,         // 2
        EspressoFilter  // 3
    }

    // Define enum 'State' with the following values:
    enum State {
        Grown,      // 0
        Picked,     // 1
        Processed,  // 2
        Tasted,     // 3
        Graded,     // 4
        Sold,       // 5
        Packed,     // 6
        Listed,     // 7
        Bought,     // 8
        Shipped,    // 9
        Received,   // 10
        Roasted,    // 11
        Offered,    // 12
        Purchased   // 13
    }

    State constant DEF_STATE = State.Grown;

    // Define a struct 'Item' with the following fields:
    struct Item {
        uint sku; // Stock Keeping Unit (SKU)
        uint upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
        address ownerID; // Metamask-Ethereum address of the current owner as the product moves through 14 stages
        address originFarmerID; // Metamask-Ethereum address of the Farmer
        string originFarmName; // Farmer Name
        string originFarmInformation; // Farmer Information
        uint originFarmElevation; // Farm Elevation
        string originFarmLatitude; // Farm Latitude
        string originFarmLongitude; // Farm Longitude
        uint originFarmPickedAt; // Coffee cherries Picked At time
        string originProductCultivar; // Coffee Cultivar
        uint productID; // Product ID potentially a combination of upc + sku
        Process productProcessType; // Coffee Process Type as represented in the enum above
        string productNotes; // Product Cup Notes
        bool productIsScored; // Product is scored by SCA Certified Coffee Taster or CQI Q Grader
        string productScore; // Product's Score
        uint productLotSize; // Product Lot Size
        uint productFOBPrice; // Product Free On Board (FOB) Price
        uint productReceivedAt; // Green coffee beans Received At time
        Roast productRoastedFor; // Coffee Roasted For as represented in the enum above
        uint productRoastedAt; // Coffee Roasted At time
        uint productPrice; // Product Price
        State itemState; // Product State as represented in the enum above
        address processorID; // Metamask-Ethereum address of the Processor
        address distributorID; // Metamask-Ethereum address of the Distributor
        address roasterID; // Metamask-Ethereum address of the Roaster
        address retailerID; // Metamask-Ethereum address of the Retailer
        address consumerID; // Metamask-Ethereum address of the Consumer
    }

    // In the constructor set 'owner' to the address that instantiated the contract
    // and set 'sku' to 1
    // and set 'upc' to 1
    constructor() public {
        sku = 1;
        upc = 1;
    }

    // Define 14 events with the same 14 state values and accept 'upc' as input argument
    event Grown(uint indexed _upc);
    event Picked(uint indexed _upc);
    event Processed(uint indexed _upc);
    event Tasted(uint indexed _upc);
    event Graded(uint indexed _upc);
    event Sold(uint indexed _upc);
    event Packed(uint indexed _upc);
    event Listed(uint indexed _upc);
    event Bought(uint indexed _upc, uint _fobPrice);
    event Shipped(uint indexed _upc);
    event Received(uint indexed _upc);
    event Roasted(uint indexed _upc);
    event Offered(uint indexed _upc);
    event Purchased(uint indexed _upc);

    // Define a modifier that verifies the Owner of an Item
    modifier verifyOwner(uint _upc, address _address) {
        require(items[_upc].ownerID == _address);

        _;
    }

    // Define a modifier that verifies the Processor Owner of an Item
    modifier verifyProcessorOwner(uint _upc, address _address) {
        require(items[_upc].processorID == _address);

        _;
    }

    // Define a modifier that verifies the Distributor Owner of an Item
    modifier verifyDistributorOwner(uint _upc, address _address) {
        require(items[_upc].distributorID == _address);

        _;
    }

    // Define a modifier that verifies the Roaster Owner of an Item
    modifier verifyRoasterOwner(uint _upc, address _address) {
        require(items[_upc].roasterID == _address);

        _;
    }

    // Define a modifier that verifies a Farmer
    modifier verifyFarmer(address _address) {
        require(FarmerRole.isFarmer(_address));

        _;
    }

    // Define a modifier that verifies a Processor
    modifier verifyProcessor(address _address) {
        require(ProcessorRole.isProcessor(_address));

        _;
    }

    // Define a modifier that verifies a Distributor
    modifier verifyDistributor(address _address) {
        require(DistributorRole.isDistributor(_address));

        _;
    }

    // Define a modifier that verifies a Roaster
    modifier verifyRoaster(address _address) {
        require(RoasterRole.isRoaster(_address));

        _;
    }

    // Define a modifier that verifies a Retailer
    modifier verifyRetailer(address _address) {
        require(RetailerRole.isRetailer(_address));

        _;
    }

    // Define a modifier that verifies a Consumer
    modifier verifyConsumer(address _address) {
        require(ConsumerRole.isConsumer(_address));

        _;
    }

    // Define a modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint _price) {
        require(msg.value >= _price);

        _;
    }

    // Define a modifier that checks the price and refunds the remaining balance
    modifier checkValue(uint _upc) {
        _;

        uint _price = items[_upc].productPrice;
        uint amountToReturn = msg.value - _price;

        address payable consumerAddress = address(uint160(items[_upc].consumerID));
        consumerAddress.transfer(amountToReturn);
    }

    // Define a modifier that checks if an item.state of a upc is Grown
    modifier grown(uint _upc) {
        require(items[_upc].itemState == State.Grown);

        _;
    }

    // Define a modifier that checks if an item.state of a upc is Picked
    modifier picked(uint _upc) {
        require(items[_upc].itemState == State.Picked);

        _;
    }

    // Define a modifier that checks if an item.state of a upc is Processed
    modifier processed(uint _upc) {
        require(items[_upc].itemState == State.Processed);

        _;
    }

    // Define a modifier that checks if an item.state of a upc is Tasted
    modifier tasted(uint _upc) {
        require(items[_upc].itemState == State.Tasted);

        _;
    }

    // Define a modifier that checks if an item.state of a upc is Graded
    modifier graded(uint _upc) {
        if (items[_upc].productIsScored) {
            require(items[_upc].itemState == State.Graded);
        } else {
            require(items[_upc].itemState == State.Tasted);
        }

        _;
    }

    // Define a modifier that checks if an item.state of a upc is Sold
    modifier sold(uint _upc) {
        require(items[_upc].itemState == State.Sold);

        _;
    }

    // Define a modifier that checks if an item.state of a upc is Packed
    modifier packed(uint _upc) {
        require(items[_upc].itemState == State.Packed);

        _;
    }

    // Define a modifier that checks if an item.state of a upc is Listed
    modifier listed(uint _upc) {
        require(items[_upc].itemState == State.Listed);

        _;
    }

    // Define a modifier that checks if an item.state of a upc is Bought
    modifier bought(uint _upc) {
        require(items[_upc].itemState == State.Bought);

        _;
    }

    // Define a modifier that checks if an item.state of a upc is Shipped
    modifier shipped(uint _upc) {
        require(items[_upc].itemState == State.Shipped);

        _;
    }

    // Define a modifier that checks if an item.state of a upc is Received
    modifier received(uint _upc) {
        require(items[_upc].itemState == State.Received);

        _;
    }

    // Define a modifier that checks if an item.state of a upc is Roasted
    modifier roasted(uint _upc) {
        require(items[_upc].itemState == State.Roasted);

        _;
    }

    // Define a modifier that checks if an item.state of a upc is Offered
    modifier offered(uint _upc) {
        require(items[_upc].itemState == State.Offered);

        _;
    }

    // Define a function 'kill' if required
    function kill() public onlyOwner {
        selfdestruct(msg.sender);
    }

    // Define a function 'growItem' that allows a farmer to mark an item 'Grown'
    function growItem(
        uint _upc,
        string memory _originFarmName,
        string memory _originFarmInformation,
        uint _originFarmElevation,
        string memory _originFarmLatitude,
        string memory _originFarmLongitude,
        string memory _originProductCultivar
    )
        public
        verifyFarmer(msg.sender)
    {
        // Add the new item as part of Grow
        items[_upc] = Item(
            sku,
            _upc,
            msg.sender,
            msg.sender,
            _originFarmName,
            _originFarmInformation,
            _originFarmElevation,
            _originFarmLatitude,
            _originFarmLongitude,
            0,
            _originProductCultivar,
            (_upc + sku)*256 + 2**16,
            Process.NotProcessed,
            "",
            false,
            "",
            0,
            0,
            0,
            Roast.NotRoasted,
            0,
            0,
            DEF_STATE,
            address(0),
            address(0),
            address(0),
            address(0),
            address(0)
        );

        // Increment sku
        sku++;

        // Emit the appropriate event
        emit Grown(_upc);
    }

    // Define a function 'pickItem' that allows a farmer to mark an item 'Picked'
    function pickItem(uint _upc)
        public
        grown(_upc)
        verifyOwner(_upc, msg.sender)
        verifyFarmer(msg.sender)
    {
        // Update the appropriate fields
        items[_upc].itemState = State.Picked;
        items[_upc].originFarmPickedAt = now;

        // Emit the appropirate event
        emit Picked(_upc);
    }

    // Define a function 'processItem' that allows a processor to mark an item 'Processed'
    function processItem(uint _upc, Process _processType)
        public
        picked(_upc)
        verifyProcessor(msg.sender)
    {
        // Update the appropriate fields
        items[_upc].ownerID = msg.sender;
        items[_upc].itemState = State.Processed;
        items[_upc].productProcessType = _processType;
        items[_upc].processorID = msg.sender;

        // Emit the appropriate event
        emit Processed(_upc);
    }

    // Define a function 'tasteItem' that allows a distributor to mark an item 'Tasted'
    function tasteItem(uint _upc, string memory _productNotes)
        public
        processed(_upc)
        verifyDistributor(msg.sender)
    {
        // Update the appropriate fields
        items[_upc].ownerID = msg.sender;
        items[_upc].itemState = State.Tasted;
        items[_upc].productNotes = _productNotes;
        items[_upc].distributorID = msg.sender;

        // Emit the appropriate event
        emit Tasted(_upc);
    }

    // Define a function 'gradeItem' that allows a distributor to mark an item 'Graded'
    function gradeItem(uint _upc, string memory _productScore)
        public
        tasted(_upc)
        verifyOwner(_upc, msg.sender)
        verifyDistributor(msg.sender)
    {
        // Update the appropriate fields
        items[_upc].itemState = State.Graded;
        items[_upc].productIsScored = true;
        items[_upc].productScore = _productScore;

        // Emit the appropriate event
        emit Graded(_upc);
    }

    // Define a function 'sellItem' that allows a processor to mark an item 'Sold'
    function sellItem(uint _upc, uint _productLotSize)
        public
        graded(_upc)
        verifyProcessorOwner(_upc, msg.sender)
    {
        // Update the appropriate fields
        items[_upc].ownerID = msg.sender;
        items[_upc].itemState = State.Sold;
        items[_upc].productLotSize = _productLotSize;

        // Emit the appropriate event
        emit Sold(_upc);
    }

    // Define a function 'packItem' that allows a processor to mark an item 'Packed'
    function packItem(uint _upc)
        public
        sold(_upc)
        verifyOwner(_upc, msg.sender)
    {
        // Update the appropriate fields
        items[_upc].itemState = State.Packed;

        // Emit the appropriate event
        emit Packed(_upc);
    }

    // Define a function 'listItem' that allows a distributor to mark an item 'Listed'
    function listItem(uint _upc)
        public
        packed(_upc)
        verifyDistributorOwner(_upc, msg.sender)
    {
        // Update the appropriate fields
        items[_upc].ownerID = msg.sender;
        items[_upc].itemState = State.Listed;

        // Emit the appropriate event
        emit Listed(_upc);
    }

    // Define a function 'buyItem' that allows a roaster to mark an item 'Bought'
    function buyItem(uint _upc, uint _productFOBPrice)
        public
        listed(_upc)
        verifyRoaster(msg.sender)
    {
        // Update the appropriate fields
        items[_upc].ownerID = msg.sender;
        items[_upc].itemState = State.Bought;
        items[_upc].productFOBPrice = _productFOBPrice;
        items[_upc].roasterID = msg.sender;

        // Emit the appropriate event
        emit Bought(_upc, _productFOBPrice);
    }

    // Define a function 'shipItem' that allows a distributor to mark an item 'Shipped'
    function shipItem(uint _upc)
        public
        bought(_upc)
        verifyDistributorOwner(_upc, msg.sender)
    {
        // Update the appropriate fields
        items[_upc].ownerID = msg.sender;
        items[_upc].itemState = State.Shipped;

        // Emit the appropriate event
        emit Shipped(_upc);
    }

    // Define a function 'receiveItem' that allows a roaster to mark an item 'Received'
    function receiveItem(uint _upc)
        public
        shipped(_upc)
        verifyRoasterOwner(_upc, msg.sender)
    {
        // Update the appropriate fields
        items[_upc].ownerID = msg.sender;
        items[_upc].itemState = State.Received;
        items[_upc].productReceivedAt = now;

        // Emit the appropriate event
        emit Received(_upc);
    }

    // Define a function 'roastItem' that allows a roaster to mark an item 'Roasted'
    function roastItem(uint _upc, Roast _productRoastedFor)
        public
        received(_upc)
        verifyOwner(_upc, msg.sender)
    {
        // Update the appropriate fields
        items[_upc].itemState = State.Roasted;
        items[_upc].productRoastedFor = _productRoastedFor;
        items[_upc].productRoastedAt = now;

        // Emit the appropriate event
        emit Roasted(_upc);
    }

    // Define a function 'offerItem' that allows a retailer to mark an item 'Offered'
    function offerItem(uint _upc, uint _productPrice)
        public
        roasted(_upc)
        verifyRetailer(msg.sender)
    {
        // Update the appropriate fields
        items[_upc].ownerID = msg.sender;
        items[_upc].itemState = State.Offered;
        items[_upc].productPrice = _productPrice;
        items[_upc].retailerID = msg.sender;

        // Emit the appropriate event
        emit Offered(_upc);
    }

    // Define a function 'purchaseItem' that allows a consumer to mark an item 'Purchased'
    function purchaseItem(uint _upc)
        public
        payable
        offered(_upc)
        verifyConsumer(msg.sender)
        paidEnough(items[_upc].productPrice)
        checkValue(_upc)
    {
        // Update the appropriate fields
        items[_upc].ownerID = msg.sender;
        items[_upc].itemState = State.Purchased;
        items[_upc].consumerID = msg.sender;

        // Transfer money to retailer
        address payable retailerAddress = address(uint160(items[_upc].retailerID));
        retailerAddress.transfer(items[_upc].productPrice);

        // Emit the appropriate event
        emit Purchased(_upc);
    }

    // Define a function 'fetchItemBufferOne' that fetches the data
    function fetchItemBufferOne(uint _upc) public view returns (
        uint itemSKU,
        address ownerID,
        address originFarmerID,
        string memory originFarmName,
        string memory originFarmInformation,
        string memory originFarmLatitude,
        string memory originFarmLongitude
    )
    {
        // Assign values to the 7 parameters, not to hit the stack limit
        return (
            items[_upc].sku,
            items[_upc].ownerID,
            items[_upc].originFarmerID,
            items[_upc].originFarmName,
            items[_upc].originFarmInformation,
            items[_upc].originFarmLatitude,
            items[_upc].originFarmLongitude
        );
    }

    // Define a function 'fetchItemBufferTwo' that fetches the data
    function fetchItemBufferTwo(uint _upc) public view returns (
        uint itemSKU,
        uint originFarmElevation,
        uint originFarmPickedAt,
        string memory originProductCultivar,
        uint productID,
        Process productProcessType,
        string memory productNotes
    )
    {
        // Assign values to the 7 parameters, not to hit the stack limit
        return (
            items[_upc].sku,
            items[_upc].originFarmElevation,
            items[_upc].originFarmPickedAt,
            items[_upc].originProductCultivar,
            items[_upc].productID,
            items[_upc].productProcessType,
            items[_upc].productNotes
        );
    }

    // Define a function 'fetchItemBufferThree' that fetches the data
    function fetchItemBufferThree(uint _upc) public view returns (
        uint itemSKU,
        bool productIsScored,
        string memory productScore,
        uint productLotSize,
        uint productFOBPrice,
        uint productReceivedAt,
        Roast productRoastedFor
    )
    {
        // Assign values to the 7 parameters, not to hit the stack limit
        return (
            items[_upc].sku,
            items[_upc].productIsScored,
            items[_upc].productScore,
            items[_upc].productLotSize,
            items[_upc].productFOBPrice,
            items[_upc].productReceivedAt,
            items[_upc].productRoastedFor
        );
    }

    // Define a function 'fetchItemBufferFour' that fetches the data
    function fetchItemBufferFour(uint _upc) public view returns (
        uint itemSKU,
        uint productRoastedAt,
        uint productPrice,
        State itemState,
        address processorID,
        address distributorID,
        address roasterID
    )
    {
        // Assign values to the 7 parameters, not to hit the stack limit
        return (
            items[_upc].sku,
            items[_upc].productRoastedAt,
            items[_upc].productPrice,
            items[_upc].itemState,
            items[_upc].processorID,
            items[_upc].distributorID,
            items[_upc].roasterID
        );
    }

    // Define a function 'fetchItemBufferFour' that fetches the data
    function fetchItemBufferFive(uint _upc) public view returns (
        uint itemSKU,
        address retailerID,
        address consumerID
    )
    {
        // Assign values to the 3 parameters
        return (
            items[_upc].sku,
            items[_upc].retailerID,
            items[_upc].consumerID
        );
    }
}